class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<>();
        if (digits.isEmpty()) {
		
            return ans;
        }
		
        ans = helper("", digits);
        return ans;
    }
    List<String> helper(String p, String up) {
	
        List<String> ans = new ArrayList<>();
        if (up.isEmpty()) {
	
            List<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }
        int digit = up.charAt(0) - '0';
        if (digit >= 2 && digit <= 6) {
            for (int i = (digit - 2) * 3; i <= ((digit - 1) * 3) - 1; i++) {
                char ch = (char) ('a' + i);
                ans.addAll(helper(p + ch, up.substring(1)));
            }
        } else if (digit == 7) {
	
            for (int i = (digit - 2) * 3; i < ((digit - 1) * 3) + 1; i++) {
                char ch = (char) ('a' + i);
                ans.addAll(helper(p + ch, up.substring(1)));
            }
        } else if (digit == 9) {
	
            for (int i = (digit - 2) * 3 + 1; i <= ((digit - 1) * 3) + 1; i++) {
                char ch = (char) ('a' + i);
					
                ans.addAll(helper(p + ch, up.substring(1)));
            }
        } else {
	
            for (int i = (digit - 2) * 3 + 1; i < ((digit - 1) * 3) + 1; i++) {
                char ch = (char) ('a' + i);
					
                ans.addAll(helper(p + ch, up.substring(1)));
            }
        }
		
        return ans;
    }
}
